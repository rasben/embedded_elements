<?php

/**
 * @file
 * Embeds content into a textarea field.
 */

define('EMBEDDED_ELEMENTS_MERGECODE_START_ESC', '\[EE');
define('EMBEDDED_ELEMENTS_MERGECODE_END_ESC', 'EE\]');
define('EMBEDDED_ELEMENTS_SOURCES_ALLOWED', serialize([
  'text' => t('Custom text'),
  'templates' => t('Custom templates'),
  'views' => t('View panes'),
  'blocks' => t('Blocks')
]));


/**
 * Implements hook_wysiwyg_plugin().
 * Adding a custom CKeditor button for adding merge codes
 */
/*
function embedded_elements_wysiwyg_plugin($editor, $version) {
  switch ($editor) {
    case 'ckeditor':
      return array(
        'embedElement' => array(
          'path' => drupal_get_path('module', 'embedded_elements') . '/ckeditor_plugins/',
          'filename' => 'plugin.js',
          'buttons' => array(
            'embedElementAdd' => t('Do something awesome'),
          ),
          'load' => TRUE,
        ),
      );
      break;
  }
}
*/

/**
 * Implements hook_admin().
 * Configuration page for the module.
 */
function embedded_elements_admin() {
  $form = array();

  /*
   * Form part: Content types
   */

  // We may want to limit this function at one point,
  // to always exclude certain node types.
  foreach (node_type_get_types() as $node_type) {
    $contenttypes_allowed[$node_type->type] = $node_type->name;
  }

  // It appears that variable_get automatically decodes json. Interesting?
  $contenttypes_currentvalue = variable_get('embedded_elements_contenttypes');

  $form['embedded_elements_contenttypes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Allowed content types'),
    '#default_value' => $contenttypes_currentvalue,
    '#options' => $contenttypes_allowed,

  );

  /*
   * Form part: Fields
   */
  $field_info_instances = field_info_instances();

  $fields_allowed = [];

  // It appears that variable_get automatically decodes json. Interesting?
  $fields_currentvalue = variable_get('embedded_elements_fields');

  // Gets all the fields from the allowed content types and checks if they are textareas.
  foreach ($field_info_instances['node'] as $content_type => $field_info) {

    if ($contenttypes_currentvalue[$content_type] !== 0) {

      foreach ($field_info as $field_info_selected) {
        // If the widget type starts with "text_textarea" (13 characters), then that's what we want.
        if
          ((!isset($fields_allowed[$field_info_selected['field_name']])) &&
          (substr($field_info_selected['widget']['type'], 0, 13) == 'text_textarea')) {
          $fields_allowed[$field_info_selected['field_name']] = $field_info_selected['label'];
        }
      }
    }
  }

  $form['embedded_elements_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Allowed fields'),
    '#default_value' => $fields_currentvalue,
    '#options' => $fields_allowed,

  );

  /*
   * Form part: Sources
   */

  $sources_allowed = unserialize(EMBEDDED_ELEMENTS_SOURCES_ALLOWED);
  $sources_currentvalue = variable_get('embedded_elements_sources');

  $form['embedded_elements_sources'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Allowed sources'),
    '#default_value' => $sources_currentvalue,
    '#options' => $sources_allowed,
  );


  return system_settings_form($form);
}

/**
 * Implements hook_admin_validate().
 * Manipulating and checking data before it's sent.
 */
function embedded_elements_admin_validate($form, &$form_state) {

  /*
   * Part: Content types
   */
  $embedded_elements_contenttypes_value = [];

  foreach ($form_state['values']['embedded_elements_contenttypes'] as $ee_ct_key => $ee_ct_value) {
    if (!empty($ee_ct_value)) {
      $embedded_elements_contenttypes_value[$ee_ct_key] = $ee_ct_value;
    }
  }

  variable_set('embedded_elements_contenttypes', json_encode($embedded_elements_contenttypes_value));

  /*
   * Part: Fields
   */
  $embedded_elements_fields_value = [];

  foreach ($form_state['values']['embedded_elements_fields'] as $ee_f_key => $ee_f_value) {
    if ($ee_f_value !== 0) {
      $embedded_elements_fields_value[$ee_f_key] = $ee_f_value;
    }
  }

  variable_set('embedded_elements_fields', json_encode($embedded_elements_fields_value));


  /*
   * Part: Sources
   */
  $embedded_elements_sources_value = [];

  foreach ($form_state['values']['embedded_elements_sources'] as $ee_s_key => $ee_s_value) {
    if ($ee_s_value !== 0) {
      $embedded_elements_sources_value[$ee_s_key] = $ee_s_value;
    }
  }

  variable_set('embedded_elements_sources', json_encode($embedded_elements_sources_value));


}

/**
 * Implements hook_menu().
 * Link for configuration pages.
 */
function embedded_elements_menu() {
  $items = array();

  $items['admin/settings/embedded_elements'] = array(
    'title' => 'Embedded Elements module settings',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('embedded_elements_admin'),
    'access arguments' => array('administer embedded elements settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  $items['admin/settings/embedded_elements/mergecodes'] = array(
    'title' => 'Embedded Elements mergecodes',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('embedded_elements_mergecodes_form'),
    'access arguments' => array('administer embedded elements mergecodes'),
    'type' => MENU_NORMAL_ITEM,
   );


  return $items;
}

/**
 * Implements hook_node_submit().
 * Manipulating the textarea contents so we can embed the actual elements.
 */
function embedded_elements_node_submit($node, $form, &$form_state) {
  $allowed_contenttypes = variable_get('embedded_elements_contenttypes');

  if (in_array($form_state['values']['type'], $allowed_contenttypes)):


    $allowed_fields = variable_get('embedded_elements_fields');

    // todo: Optimize this.
    foreach ($allowed_fields as $allowed_field => $allowed_field_key) {
      if
      (isset($form_state['values'][$allowed_field]) &&
      !empty($form_state['values'][$allowed_field][LANGUAGE_NONE][0]['value'])) {


        $haystack = $form_state['values'][$allowed_field][LANGUAGE_NONE][0]['value'];


        preg_match_all('#' . EMBEDDED_ELEMENTS_MERGECODE_START_ESC . '(.*?)' . EMBEDDED_ELEMENTS_MERGECODE_END_ESC . '#', $haystack, $matches);



        dpm($matches);

      }
    }

  endif; //End content type check
}

/**
 * Implements hook_form().
 * A form for defining different merge codes and their content.
 */
function embedded_elements_mergecodes_form($form,&$form_submit) {


  $existing_mergecodes = variable_get('embedded_elements_mergecodes');

  if (!is_array($existing_mergecodes)){
    $existing_mergecodes = [];
  }

  $sources_allowed = unserialize(EMBEDDED_ELEMENTS_SOURCES_ALLOWED);

  //todo
  $templates_detected = [];

  $templates_allowed = $templates_detected;
  $views_allowed = [];
  $blocks_allowed = [];


  /*
   * Form elements for existing mergecodes.
   */
  foreach ($existing_mergecodes as $mergecode):

    if (!empty($mergecode)) {
      $mergecode_settings = json_decode($mergecode);
    }
    else {
      $mergecode_settings = [];
    }

    // This is just to show the user what's going on.
    // It wont be used in any kind of submit.
    $form[$mergecode]['identifier'] = array(
      '#title' => t('Identifier'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#default_value' => $mergecode,
      '#attributes' => array('readonly' => 'readonly'),
      '#description' => t('This code may be used in a textarea with') . ' [EE ' . $mergecode . ' EE]',
      '#prefix' => '<h2>' . t('Existing mergecode') . ': ' . $mergecode_settings['name'] . '</h2>',

    );

    $form[$mergecode]['name'] = array(
      '#title' => t('Name'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#default_value' => $mergecode_settings['name']
    );

    $form[$mergecode]['embedded_elements_source'] = array(
      '#type' => 'select',
      '#title' => t('Source'),
      '#default_value' => $mergecode_settings['source'],
      '#options' => $sources_allowed,
    );


    // todo: Should this be a helper function? It will be used once more.
    foreach ($sources_allowed as $source):

      if ($source == 'blocks') {
        $form[$mergecode]['embedded_elements_block'] = array(
          '#type' => 'select',
          '#title' => t('Block to display'),
          '#default_value' => $mergecode_settings['block'],
          '#options' => $blocks_allowed,
        );
      }

      else if ($source == 'views') {
        $form[$mergecode]['embedded_elements_view'] = array(
          '#type' => 'select',
          '#title' => t('Viewpane to display'),
          '#default_value' => $mergecode_settings['view'],
          '#options' => $views_allowed,
        );
      }

      else if ($source == 'text') {
        $form[$mergecode]['embedded_elements_text'] = array(
          '#type' => 'text_format',
          '#format' => 'full_html',
          '#title' => t('Custom text to display'),
          '#default_value' => $mergecode_settings['text'],
        );
      }

      else if ($source == 'template') {
        $form[$mergecode]['embedded_elements_template'] = array(
          '#type' => 'select',
          '#title' => t('Custom template to display'),
          '#default_value' => $mergecode_settings['template'],
          '#options' => $templates_allowed,
          '#description' => t('Detected templates that are made for embeddeding. Put your template (.tpl.php) files in your theme folder, in the following structure: [themename]/templates/embedded_elements.')
        );
      }

    endforeach; //Ends looping through souces_allowed

  endforeach; //Ends looping through existing_mergecodes

  /*
   * Form elements for a new merge code.
   */

    $form['NEW']['identifier'] = array(
      '#title' => t('Identifier'),
      '#type' => 'textfield',
      '#description' => t('This code may be used in a textarea with [EE your_merge_code EE]. Only alphanumerical characters and underscores are allowed and will automatically be converted. If you do not write anything, the system will generate the merge code for you based on the name.'),
      '#prefix' => '<h2>' . t('Create new mergecode') . '</h2>',

    );

    $form['NEW']['name'] = array(
      '#title' => t('Name'),
      '#type' => 'textfield',
      '#required' => TRUE,
    );

    $form['NEW']['embedded_elements_source'] = array(
      '#type' => 'select',
      '#title' => t('Source'),
      '#options' => $sources_allowed,
    );


    foreach ($sources_allowed as $source => $source_name):
      if ($source == 'blocks') {
        $form['NEW']['embedded_elements_block'] = array(
          '#type' => 'select',
          '#title' => t('Block to display'),
          '#options' => $blocks_allowed,
        );
      }

      else if ($source == 'views') {
        $form['NEW']['embedded_elements_view'] = array(
          '#type' => 'select',
          '#title' => t('Viewpane to display'),
          '#options' => $views_allowed,
        );
      }

      else if ($source == 'text') {
        $form['NEW']['embedded_elements_text'] = array(
          '#type' => 'textarea',
          '#title' => t('Custom text to display'),
        );
      }

      else if ($source == 'template') {
        $form['NEW']['embedded_elements_template'] = array(
          '#type' => 'select',
          '#title' => 'Custom template to display',
          '#options' => $templates_allowed,
          '#description' => t('Detected templates that are made for embeddeding. Put your template (.tpl.php) files in your theme folder, in the following structure: [themename]/templates/embedded_elements.')
        );
      }

    endforeach; //Ends looping through souces_allowed



  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}
