<?php

/**
 * @file
 * Embeds content into a CKEditor text field.
 */

/**
 * Implements hook_wysiwyg_plugin().
 * Adding a custom CKeditor button for adding merge codes
 */
/*
function embedded_elements_wysiwyg_plugin($editor, $version) {
  switch ($editor) {
    case 'ckeditor':
      return array(
        'embedElement' => array(
          'path' => drupal_get_path('module', 'embedded_elements') . '/ckeditor_plugins/',
          'filename' => 'plugin.js',
          'buttons' => array(
            'embedElementAdd' => t('Do something awesome'),
          ),
          'load' => TRUE,
        ),
      );
      break;
  }
}
*/

/**
 * Implements hook_admin().
 * Configuration page for the module.
 */
function embedded_elements_admin() {
  $form = array();

  /*
   * Form part 1: Content types
   */

  // We may want to limit this function at one point,
  // to always exclude certain node types.
  foreach (node_type_get_types() as $node_type) {
    $contenttypes_allowed[$node_type->type] = $node_type->name;
  }

  // It appears that variable_get automatically decodes json. Interesting?
  $contenttypes_currentvalue = variable_get('embedded_elements_contenttypes');

  $form['embedded_elements_contenttypes'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Allowed content types',
    '#default_value' => $contenttypes_currentvalue,
    '#options' => $contenttypes_allowed,

  );

  /*
   * Form part 2: Fields
   */
  $field_info_instances = field_info_instances();

  $fields_allowed = [];

  // It appears that variable_get automatically decodes json. Interesting?
  $fields_currentvalue = variable_get('embedded_elements_fields');

  // Gets all the fields from the allowed content types and checks if they are textareas.
  foreach ($field_info_instances['node'] as $content_type => $field_info) {

    if ($contenttypes_currentvalue[$content_type] !== 0) {

      foreach ($field_info as $field_info_selected) {
        // If the widget type starts with "text_textarea" (13 characters), then that's what we want.
        if
          ((!isset($fields_allowed[$field_info_selected['field_name']])) &&
          (substr($field_info_selected['widget']['type'], 0, 13) == 'text_textarea')) {

          $fields_allowed[$field_info_selected['field_name']] = $field_info_selected['field_name'];
        }
      }
    }
  }

  $form['embedded_elements_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Allowed fields',
    '#default_value' => $fields_currentvalue,
    '#options' => $fields_allowed,

  );

  return system_settings_form($form);
}

/**
 * Implements hook_admin_validate().
 * Manipulating and checking data before it's sent.
 */
function embedded_elements_admin_validate($form, &$form_state) {

  /*
   * Part 1: Content types
   */
  $embedded_elements_contenttypes_value = [];

  foreach ($form_state['values']['embedded_elements_contenttypes'] as $ee_ct_key => $ee_ct_value) {
    if (!empty($ee_ct_value)) {
      $embedded_elements_contenttypes_value[$ee_ct_key] = $ee_ct_value;
    }
  }

  variable_set('embedded_elements_contenttypes', json_encode($embedded_elements_contenttypes_value));

  /*
   * Part 2: Fields
   */
  $embedded_elements_fields_value = [];

  foreach ($form_state['values']['embedded_elements_fields'] as $ee_f_key => $ee_f_value) {
    if ($ee_f_value !== 0) {
      $embedded_elements_fields_value[$ee_f_key] = $ee_f_value;
    }
  }

  variable_set('embedded_elements_fields', json_encode($embedded_elements_fields_value));

}

/**
 * Implements hook_menu().
 * Link for configuration page.
 */
function embedded_elements_menu() {
  $items = array();

  $items['admin/settings/embedded_elements'] = array(
    'title' => 'Embedded Elements module settings',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('embedded_elements_admin'),
    'access arguments' => array('administer embedded elements settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

/**
 * Implements hook_node_submit().
 * Manipulating the textarea contents so we can embed the actual elements.
 */
function embedded_elements_node_submit($node, $form, &$form_state) {
  $allowed_contenttypes = variable_get('embedded_elements_contenttypes');

  if (in_array($form_state['values']['type'], $allowed_contenttypes)):


    $allowed_fields = variable_get('embedded_elements_fields');

    // todo: Optimize this.
    foreach ($allowed_fields as $allowed_field => $allowed_field_key) {
      if
      (isset($form_state['values'][$allowed_field]) &&
      !empty($form_state['values'][$allowed_field][LANGUAGE_NONE][0]['value'])) {


        $raw_haystack = $form_state['values'][$allowed_field][LANGUAGE_NONE][0]['value'];

        dpm($raw_haystack);

      }
    }

  endif; //End content type check
}
